import java.util.HashSet;
import java.util.Set;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import java.lang.Math.*;

public class chess {

    public static void main (String[] arg) {

		chessMaker(7,2,2,2,0,1);
		//chessMaker(3,2,0,0,1,0);
		//chessMaker(4,0,0,0,2,4);
	
    }
	
	// The method that prints all possible strings of length k.  It is
    //  mainly a wrapper over recursive function printAllKLengthRec()
    public static void printAllKLength(char set[], int k,Set<String> perm) {
        int n = set.length;
		
         printAllKLengthRec(set, "", n, k,perm);
		
		
    }
 
    // The main recursive method to print all possible strings of length k
    public static void printAllKLengthRec(char set[], String prefix, int n, int k, Set<String> perm) {
         
        // Base case: k is 0, print prefix
        if (k == 0) {
            //System.out.println(prefix);
			perm.add(prefix);
            return ;
        }
 
        // One by one add all characters from set and recursively 
        // call for k equals to k-1
        for (int i = 0; i < n; ++i) {
             
            // Next character of input added
            String newPrefix = prefix + set[i]; 
            
            // k is decreased, because we have added a new character
            printAllKLengthRec(set, newPrefix, n, k - 1,perm); 
        }
		
    }

	

	/**
	 * Calculates the permutations of a String
	 * @param str    String to calculate the permutations
 
     */
	public static Set<String> permutationFinder(String str) {
        Set<String> perm = new HashSet<String>();
        //Handling error scenarios
        if (str == null) {
            return null;
        } else if (str.length() == 0) {
            perm.add("");
            return perm;
        }
        char initial = str.charAt(0); // first character
        String rem = str.substring(1); // Full string without first character
        Set<String> words = permutationFinder(rem);
        for (String strNew : words) {
            for (int i = 0;i<=strNew.length();i++){
                perm.add(charInsert(strNew, initial, i));
            }
        }
        return perm;
    }
	
	
 
	public static String charInsert(String str, char c, int j) {
        String begin = str.substring(0, j);
        String end = str.substring(j);
		  return begin + c + end;
    }
 

	
	/**
	 * Check if the position you are looking is safe to insert a piece
	 * @param board     		actual board
     * @param i         		position M of the board
	 * @param j         		position N of the board
	 * @param boardSize 		size of the board
	 * @param piece         	piece you do intend to insert
	 * @param movement          type of movement you are using: 1: King-Like 2: Rook-Like 3: Knight-Like 4: Bishop-Like
     
     */
	public static Boolean look(String[][] board,int i, int j, int boardSize, String piece, int movement) {
	
		if(i >= 0 && j >= 0 && i <= (boardSize-1) && j <= (boardSize-1)){
			
			if( (board[i][j] == "_")
			
			|| ( movement == 4 &&  !piece.equals("B") && !board[i][j].equals("B") 
			&& !piece.equals("Q") &&  !board[i][j].equals("Q"))
			
			|| ( movement == 3 &&  !piece.equals("N") && !board[i][j].equals("N"))
			
			|| ( movement == 2 &&  !piece.equals("R") && !board[i][j].equals("R") 
			&& !piece.equals("Q") &&  !board[i][j].equals("Q"))
			
			|| ( movement == 1 &&  !piece.equals("K") && !board[i][j].equals("K"))
		
			
			){
			
				return true;
			}
			
		}else{
			return true;
		}
		
		return false;
	}
	
	/**
	 * Check Around the position in a King-Like Move
	 * @param board     		actual board
     * @param i         		position M of the board
	 * @param j         		position N of the board
	 * @param boardSize 		size of the board
	 * @param piece         	piece you do intend to insert
     
     */
	public static Boolean lookAround(String[][] board,int i, int j, int boardSize, String piece) {
	
			if( look(board,(i-1),(j-1),boardSize,piece,1)){
					if( look(board,(i-1),(j),boardSize,piece,1)){
						if( look(board,(i-1),(j+1),boardSize,piece,1)){					
							if( look(board,(i+1),(j-1),boardSize,piece,1)){																		
								if( look(board,(i+1),(j),boardSize,piece,1)){																						
									if( look(board,(i+1),(j+1),boardSize,piece,1)){																												
										if( look(board,(i),(j-1),boardSize,piece,1)){																																																														
											if( look(board,(i),(j+1),boardSize,piece,1)){
													
													return true;												
											}
										}
									}
								}
							}
						}
					}
			}
		
		return false;
	}
	
	/**
	 * Check Around the position in a Rook-Like Move
	 * @param board     		actual board
     * @param i         		position M of the board
	 * @param j         		position N of the board
	 * @param boardSize 		size of the board
	 * @param piece         	piece you do intend to insert
     
     */
	public static Boolean lookVH(String[][] board,int i, int j, int boardSize, String piece) {
	
		Boolean r1 = true;
		Boolean r2 = true;
		Boolean r3 = true;
		Boolean r4 = true;
	
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i+k),(j),boardSize,piece,2)){
				
					r1 = false;												
				}
			}
			
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i-k),(j),boardSize,piece,2)){
				
					r2 = false;													
				}
			}
			
			
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i),(j+k),boardSize,piece,2)){
				
					r3 = false;													
				}
			}
			
			
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i),(j-k),boardSize,piece,2)){
				
					r4 = false;													
				}
			}
			
			if(r1 && r2 && r3 && r4){
				return true;
			}
		
		return false;
	}
	
	/**
	 * Check Around the position in a Knight-Like Move
	 * @param board     		actual board
     * @param i         		position M of the board
	 * @param j         		position N of the board
	 * @param boardSize 		size of the board
	 * @param piece         	piece you do intend to insert
     
     */
	public static Boolean lookKnight(String[][] board,int i, int j, int boardSize, String piece) {
	
		if( look(board,(i-2),(j-1),boardSize,piece,3)){
			if( look(board,(i-1),(j-2),boardSize,piece,3)){
				if( look(board,(i+1),(j+2),boardSize,piece,3)){					
					if( look(board,(i+2),(j+1),boardSize,piece,3)){
						if( look(board,(i-2),(j+1),boardSize,piece,3)){
							if( look(board,(i-1),(j+2),boardSize,piece,3)){
								if( look(board,(i+1),(j-2),boardSize,piece,3)){					
									if( look(board,(i+2),(j-1),boardSize,piece,3)){	
									
										return true;	
										
									}
								}
							}
						}
					}
				}
			}
		}
		
		return false;
	
	}
	
	/**
	 * Check Around the position in a Bishop-Like Move
	 * @param board     		actual board
     * @param i         		position M of the board
	 * @param j         		position N of the board
	 * @param boardSize 		size of the board
	 * @param piece         	piece you do intend to insert
     
     */
	public static Boolean lookD(String[][] board,int i, int j, int boardSize,String piece) {
		
		Boolean b1 = true;
		Boolean b2 = true;
		Boolean b3 = true;
		Boolean b4 = true;
	
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i+k),(j+k),boardSize,piece,4)){
				
					b1 = false;												
				}
			}
			
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i-k),(j-k),boardSize,piece,4)){
				
					b2 = false;													
				}
			}
			
			
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i-k),(j+k),boardSize,piece,4)){
				
					b3 = false;													
				}
			}
			
			
			for(int k=1; k<boardSize; k++){
				if( !look(board,(i+k),(j-k),boardSize,piece,4)){
				
					b4 = false;													
				}
			}
			
			
			if(b1 && b2 && b3 && b4){
				return true;
			}
			
		return false;
	}
	
	/**
	 * Check if a position is threaten
	 * @param board     		actual board
     * @param i         		position M of the board
	 * @param j         		position N of the board
	 * @param boardSize 		size of the board
	 * @param piece         	piece you do intend to insert
     
     */
	public static Boolean threat(String[][] board,int i, int j,int boardSize, String piece) {
	
		if(lookAround(board,i,j,boardSize,piece) 
		&& lookVH(board,i,j,boardSize,piece) 
		&& lookD(board,i,j,boardSize,piece)
		&& lookKnight(board,i,j,boardSize,piece)
		){
			return true;
		}

		return false;
	}	
	
	/**
	 * Insert a piece
	 * @param board     		actual board
	 * @param boardSize 		size of the board
	 * @param piece         	piece yo do intend to insert
	 * @param i        			position M of the board
	 * @param j        			position N of the board
     
     */
	public static Boolean putPiece(String[][] board, int boardSize, String piece, int i, int j, int counter) {
		
		if (board[i][j] == "_" && threat(board,i,j,boardSize, piece) ){
				
			board[i][j] = piece;
			return true;
				
		}else{
		
			if( i == boardSize-1 && j == boardSize-1 && counter == 0){
				
				putPiece(board, boardSize, piece, 0, 0,1);
				
			}else if( i == boardSize-1 && j == boardSize-1 && counter == 1){
			
				return true;
			
			}else if(j == boardSize-1 ){
			
				putPiece(board, boardSize, piece, i +1, j,counter);
				
			}else if(i == boardSize-1){
			
				putPiece(board, boardSize, piece, 0, j+1,counter);
				
			}else {
				
				putPiece(board, boardSize, piece, i+1, j,counter);
			
			}
		
		}
		

		return true;
    }
	
	/**
	 * Resets the variables regarding the board
	 * @param board     		actual board
     * @param Result         	final board to print
	 * @param boardSize 		size of the board
     
     */
	public static void resetBoard(String[][] board, String[] Result, int boardSize){
		
			for(int i=0; i<boardSize; i++){
				for(int j=0; j<boardSize; j++){
				 
					board[i][j] = "_";
					
				}
			}
			
			for(int i=0; i<boardSize; i++){
			  
					Result[i] = " ";
				
			}
		
	}
	
	/**
	 * Print a possible boards
	 * @param board     		actual board
     * @param Result         	final board to print
	 * @param boardSize 		size of the board
	 * @param perm         		actual permutation of the pieces
	 * @param kings         	number of kings
	 * @param queens         	number of queens
	 * @param bishops         	number of bishops
	 * @param rooks         	number of rooks
	 * @param knights         	number of knights
	 * @param Duplicates        String with the duplicates results
	 * @param numberOfBoards    number of successful boards
	 * @param writer   			used to write on a file
	 * @param permi    			actual permutation of the M position
	 * @param permj    			actual permutation of the N position
     
     */
	public static int printBoard(String[][] board, String[] Result, int boardSize, String perm
	,int kings, int queens, int bishops, int rooks, int knights, String[] Duplicates, int numberOfBoards
	, Writer writer, String permi,String permj){
	

		int pieces = 0;
		
		
		for(int i=0; i<perm.length(); i++){
			if(i>boardSize-1){
				putPiece(board,boardSize,perm.substring(i,i+1),Integer.parseInt(permi.substring(0,1))
				,Integer.parseInt(permj.substring(0,1)),0);
			}
			else{
				putPiece(board,boardSize,perm.substring(i,i+1)
				,Integer.parseInt(permi.substring(i,i+1)),Integer.parseInt(permj.substring(i,i+1)),0);
			}
			
		}
		
		for(int i=0; i<boardSize; i++){
			for(int j=0; j<boardSize; j++){
				if(!board[i][j].equals("_")){pieces++;}
			}
		}
		
	
		if(pieces == kings + queens + bishops + rooks + knights){
		
			for(int i=0; i<boardSize; i++){
				for(int j=0; j<boardSize; j++){
					Duplicates[numberOfBoards] = Duplicates[numberOfBoards] + board[i][j];
				}
			}
			
			for(int i=0; i<numberOfBoards; i++){
				if (Duplicates[i].equals(Duplicates[numberOfBoards]))
					Duplicates[numberOfBoards] = "";
			}
			
			if (!Duplicates[numberOfBoards].equals("")) {
				
					numberOfBoards++;
					//System.out.println(numberOfBoards);
			
			
					for(int i=0; i<boardSize; i++){
						for(int j=0; j<boardSize; j++){
			  
							Result[i] = Result[i] + " " + board[i][j];


						}
						try {
							writer.write(Result[i]+"\n");
						} catch (IOException e) {
						System.err.println("Problem writing");
						}
					}
					    try {
							writer.write(""+"\n");
							writer.write(""+"\n");
							writer.write(""+"\n");
	
							} catch (IOException e) {
							System.err.println("Problem writing");
						}
			}
		}
		
		return numberOfBoards;
	}
	
	public static Boolean diffetentCombi(String combi, int pieces){
		
			for(int i=0; i<pieces; i++){
				if (!combi.contains(Integer.toString(i))){
					return false;
				}
			}
		return true;
	}

	
	/**
	 * Main procedure to calculate the possible boards
	 * @param boardSize 		size of the board
	 * @param kings         	number of kings
	 * @param queens         	number of queens
	 * @param bishops         	number of bishops
	 * @param rooks         	number of rooks
	 * @param knights         	number of knights
     
     */
	public static void chessMaker(int boardSize, int kings, int queens, int bishops, int rooks, int knights){
		try {
		File statText = new File("C:/result.txt");
        FileOutputStream is = new FileOutputStream(statText);
        OutputStreamWriter osw = new OutputStreamWriter(is);    
        Writer w = new BufferedWriter(osw);
		
		
		//String to allocate the boards
		String[][] board = new String[boardSize][boardSize];
		
		//String to print the boards
		String[] Result = new String[boardSize];
		
		//String used to remove the possible duplicates
		String[] Duplicates = new String[(int) (Math.pow((double)boardSize,(double)(boardSize+1)))];
		
		Set<String> numberPermutation = new HashSet<String>();
		
		char[] positionPermutations = new char[boardSize];
		
		for(int i=0; i<Duplicates.length; i++){
			  
			Duplicates[i] = "";
				
		}
		
		int numberOfBoards = 0;
		
		String permutations = "";
		
		for(int i=1; i<=kings; i++){
			permutations = permutations + "K";
		}
		
		for(int i=1; i<=queens; i++){
			permutations = permutations + "Q";
		}
		
		for(int i=1; i<=bishops; i++){
			permutations = permutations + "B";
		}
		
		for(int i=1; i<=rooks; i++){
			permutations = permutations + "R";
		}
		
		for(int i=1; i<=knights; i++){
			permutations = permutations + "N";
		}
		
	
		
		for(int i=0; i< boardSize; i++){
			positionPermutations[i] = Character.forDigit(i, 10);
		}
		


        printAllKLength(positionPermutations,boardSize,numberPermutation);
	
		String[] perm  =   permutationFinder(permutations).toArray(new String[permutationFinder(permutations).size()]);
		String[] permi =   numberPermutation.toArray(new String[numberPermutation.size()]);
		String[] permj =   numberPermutation.toArray(new String[numberPermutation.size()]);
	

		for(int k=0; k<1; k++){	
			for(int i=0; i<permi.length; i++){
				if(diffetentCombi(permi[i],boardSize)){
					for(int j=0; j<permj.length; j++){
						if( diffetentCombi(permj[j],boardSize)){
							resetBoard(board,Result,boardSize);
				
							numberOfBoards = printBoard(board,Result,boardSize, perm[k], kings,  queens,  bishops,  rooks,  knights
							, Duplicates,numberOfBoards,w,permi[i],permj[j]);
						}
					}
				}
			}
		
		}
		
		
		w.close();
		
		} catch (IOException e) {
        System.err.println("Problem writing");
		}
		
	}
}
